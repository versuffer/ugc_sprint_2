version: '3.9'

services:

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: mongoadmin        # Пользователь root
#      MONGO_INITDB_ROOT_PASSWORD: mongoadmin        # Пароль root
#      MONGO_INITDB_DATABASE: MoviesDB          # Имя создаваемой базы данных
    volumes:
      - ./infra/mogodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db
    networks:
      - ugc_network
    restart: unless-stopped

  kafka-0:
    image: bitnami/kafka:3.4
    ports:
      - "9094:9094"
    networks:
      - ugc_network
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - AUTO_CREATE_TOPICS=true

    volumes:
      - kafka_0_data:/bitnami/kafka

  kafka-1:
    image: bitnami/kafka:3.4
    ports:
      - "9095:9095"
    networks:
      - ugc_network
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - AUTO_CREATE_TOPICS=true

    volumes:
      - kafka_1_data:/bitnami/kafka

  kafka-2:
    image: bitnami/kafka:3.4
    ports:
      - "9096:9096"
    networks:
      - ugc_network
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - AUTO_CREATE_TOPICS=true

    volumes:
      - kafka_2_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - "8080:8080"
    networks:
      - ugc_network
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092
      - KAFKA_CLUSTERS_0_NAME=kraft

  clickhouse-server:
    image: clickhouse/clickhouse-server:24.7
    container_name: clickhouse-server
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - ugc_network
    env_file:
      - ".env"
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse_data:/var/lib/clickhouse

  elasticsearch:
    image: elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - ugc_network
    volumes:
      - ./infra/elastic/data:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.10.2
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - ugc_network
    depends_on:
      - elasticsearch

  logstash:
    image: logstash:8.10.2
    environment:
      XPACK_MONITORING_ENABLED: "false"
      ES_HOST: "elasticsearch:9200"
    ports:
      - "5044:5044/udp"
    volumes:
      - ./infra/logstash/logstash.conf:/config/logstash.conf:ro
    command: logstash -f /config/logstash.conf
    networks:
      - ugc_network
    depends_on:
      - elasticsearch

  filebeat:
    image: elastic/filebeat:8.10.2
    user: root
    volumes:
      - ./infra/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - ugc_network
    depends_on:
      - logstash

  fastapi_app:
    container_name: fastapi_app
    build:
      dockerfile: Dockerfile_API
    env_file:
      - ".env"
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "10m"
    environment:
      KAFKA_HOST: kafka-0
      KAFKA_PORT: 9092
    networks:
      - ugc_network
    restart: always
    depends_on:
      - clickhouse-server
      - filebeat

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "8000:8000"
    networks:
      - ugc_network
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/fastapi_app.conf:/etc/nginx/conf.d/fastapi_app.conf
      - nginx_static:/var/html/static/
      - nginx_media:/var/html/media/
    restart: always
    depends_on:
      - fastapi_app

volumes:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:
  clickhouse_data:
  nginx_static:
  nginx_media:
  mongo_data:

networks:
  ugc_network:
    driver: bridge
